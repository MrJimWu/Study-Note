// For more information see https://aka.ms/fsharp-console-apps
open System
//  F# 是表达式 式的返回值
//  Tuple 元组  的返回和拆解
(*let d = 
    let a=1
    let b=2
    let c=3  
    900
let user =
    let name="Kobe"
    let age= 41
    let salary=99999.999
    (name,age,salary)
    ("Kobe1",41,1000000)

let (name,age,salary) = user
let a,b,c = user


//  record
//Trup 定义类型
type Gender=
      | Male
      | Famele
type User=
   {
     Name :string
     Age:int
     Salary:float
     Gender:Gender
   }

let testGender= Male
let testGender2= Gender.Famele
let user2=
   { 
     Name="A"
     Age=1
     Salary=0.0
     Gender=Male
   }

let  name2=user2.Gender
//匿名记录 和修改记录的值
let user3=
{
  user2 
     with
        Name="Kobe3"
        Age=100
  }
    
let user4= 
    {|
        Name="123"
        Age=123
        Salary=123.0
     |}

let name_of_user5= 
    {|
      user4 with Name="1234"
     |}

//联合
//区别联合
type PlayerRecored=
     { 
       Name:string
       Level:int 
       Strenth :int 
       Wisdom :int 
       Exp:float
     }
type MasterRecored=
    {
      Blood:float
      Atteck:int
    }
type NPCRecored=
    {

      Name:string
      Line:string
    }

type Person=
      |PlayerCase of PlayerRecored
      |MasterCase of MasterRecored
      |NPCCase of NPCRecored
let npc1={Name="npc1;"Line="HELLO"}
let p1=Person.NPCCase npc1


mutable*) ///可变性
//类
//member 类成员关键词
//: 说明数据的类型 适合类型推断 with。 do 放在menber z之前 Let之后 inherit
// unit 无返回类型  
// interface   xxx  with  可以用类实现 
// member  
// interface  用inherit继承多个接口 abstract member  
// (x:>Interface) 强制转换之后可以用接口下面的 方法
//集合类型 list  [1;2;3]  [1..2..10] 步长式2 构造数据源
// @把两个list 拼接。 方法 ：： 拼接一个元素。获取list中的某个元素。list 不呢个被改变
//  集合类型 arry =[|1;2;3|] arry 类型式可以改变中间的值
// let arrayifTenZreoe :int arry=Array.zeroCreat 10
// array 式没有拼接符号的
// arry Array2D.zeroCreat<int>3 3  多维的数组
// 集合类型  seq {0..10..100}  seqFromArry=[|1..10|];> seq<int>
// let seqFromArry2=[|1..10|]|>Seq.ofArray   总结：  seq 是  list array  的基类 seq的惰性计算  （当需要的计算出来）
//注意seq<int>是 泛型结构  
// F# 数据结构  Dictionary    是HASH表----------- HashSet Hash集合-------------- Map  Set是红黑树 的数据集合（不能改变，数据安全）
// myDict=Dictionary<int,string>()  HashSet<int>(|1..100|) HashSet 是不能重复, 在内存做增删改查是比较块
//Add 增加操作   Remove() 
//data|>Map
//Map.ContainsKey() myMap3  //Set.ContainsKey() myMap3
//myDict.[1] 和 .item
//数据的基本类型   整形 字符串  unit  元组  记录  匿名记录 类 联合 抽象  主要的数据类型
// 函数
// 定义      let  f x  = x+1    按键  alt+enter 
// 注意作用域 scope
// let fuction 
// let f x=(x,x)
let cylinderVolum  redius length = 
    let pi = 3.145926
    length * pi * redius * redius
    //函数签名  
    // unit 在F# 中是没有输出  
    // 部分应用函数
    // 递归函数   rec 关键词
    // 函数式编程里面  函数和数据是一样的
    //  let rec 
    // lambda 表达式 （匿名函数）
    //函数的组合和管道 |>  >> ,<<  <|
let function1 x=x+1
let function2 x=x*2
let h=function1>>function2
let result5= h 100
let result=
    100 |> function1|>function2
let addOne x=x+1
let timesTwo x=x*2
